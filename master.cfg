# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave

MACHINES = [
             ["win", ["xp", "vista_x64", "7_x64"]],
             ["linux", ["lucid_x64"]],
           ]

c['slaves'] = []
for (os, os_versions) in MACHINES:
  for version in os_versions:
    c['slaves'].append(BuildSlave("%s_%s_bot" % (os, version),
                                  "bot1passwd"))

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 19989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

# If you wat to use SVNPoller, it might look something like
#  # Where to get source code changes
dr_svnurl = "http://dynamorio.googlecode.com/svn/trunk"
drm_svnurl = "http://drmemory.googlecode.com/svn/trunk"

from buildbot.changes.svnpoller import SVNPoller
# TODO(timurrrr): buildbot doesn't support multiple changesources...
#dr_poller = SVNPoller(
#                   svnurl=dr_svnurl,
#                   pollinterval=60, # seconds
#                   histmax=100,
#                   svnbin='/usr/bin/svn',
#)
drm_poller = SVNPoller(
                   svnurl=drm_svnurl,
                   pollinterval=60, # seconds
                   histmax=50,
                   svnbin='/usr/bin/svn',
)
c['change_source'] = [ drm_poller ]

####### SCHEDULERS

## configure the Schedulers

from buildbot import scheduler
BUILDERS=[]
DR_BUILDERS=[]
DRM_BUILDERS=[]
for (os, os_versions) in MACHINES:
  for version in os_versions:
    dr_builder  = "%s-%s-dr"  % (os, version)
    drm_builder = "%s-%s-drm" % (os, version)
    BUILDERS += [dr_builder, drm_builder]
    DR_BUILDERS += [dr_builder]
    DRM_BUILDERS += [drm_builder]

c['schedulers'] = []
c['schedulers'].append(scheduler.Scheduler(
                           name="all",
                           branch=None,
                           treeStableTimer=60,
                           builderNames=DRM_BUILDERS))
for (os, os_versions) in MACHINES:
  for version in os_versions:
    c['schedulers'].append(scheduler.Triggerable(
                           name=("%s-%s-drm-trigger" % (os, version)),
                           builderNames=["%s-%s-drm" % (os, version)]))
c['schedulers'].append(scheduler.Periodic(
                           name="periodic",
                           branch=None,
                           periodicBuildTimer=1*60*60,  # Every 1 hour
                           builderNames=DR_BUILDERS))

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['bots'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

from buildbot.process import factory
from buildbot.process.properties import WithProperties
from buildbot.steps.source import SVN
from buildbot.steps.shell import Configure
from buildbot.steps.shell import Compile
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import SetProperty
from buildbot.steps.shell import Test
from buildbot.steps import trigger
from buildbot.steps.python_twisted import Trial

WINDDK_PATH="C:\\WinDDK\\7600.16385.1\\lib\\wxp\\i386\\ntdll.lib"

dr_win_factory = factory.BuildFactory()
# TODO(timurrrr): I hope this doesn't use the Dr.M revision...
dr_win_factory.addStep(SVN(svnurl=dr_svnurl,
                           workdir="dynamorio",
                           mode="copy",
                           name="Checkout DynamoRIO"))
for debug in ["ON", "OFF"]:
  dr_win_factory.addStep(
    Configure(
        command=["cmake", "-G", "NMake Makefiles",
                 "-DDEBUG=%s" % debug, "-DBUILD_DOCS:BOOL=OFF",
                 "-DBUILD_DRGUI:BOOL=OFF", "-DBUILD_SAMPLES:BOOL=OFF",
                 "-DCMAKE_INSTALL_PREFIX:FILEPATH=exports",
                 "-DNTDLL_LIBPATH:FILEPATH=%s" % WINDDK_PATH,
                 "..\\dynamorio"],
        name=("CMake [debug=%s]" % debug)))
  dr_win_factory.addStep(
    Compile(
        command=["nmake", "install"],
        name=("nmake install [debug=%s]" % debug)))

dr_win_factory.addStep(
    ShellCommand(
        command=["7z", "a",
                 WithProperties("..\\..\\dr_builds\\dr_%(got_revision)s.7z"),
                 "exports"],
        haltOnFailure=True,
        name="Archive DynamoRIO build",
        description="archive"))
dr_win_factory.addStep(
    ShellCommand(
        command=["copy",
                 WithProperties("..\\..\\dr_builds\\dr_%(got_revision)s.7z"),
                 "..\\..\\dr_builds\\dr_latest.7z"],
        haltOnFailure=True,
        name="Archive DynamoRIO build",
        description="archive"))
dr_win_factory.addStep(
    trigger.Trigger(
        schedulerNames=[WithProperties("%sm-trigger", "buildername")],
        set_properties={'dr_revision' : WithProperties("%s", "got_revision"),},
        updateSourceStamp=False))

drm_win_factory = factory.BuildFactory()
drm_win_factory.addStep(SVN(svnurl=drm_svnurl,
                            workdir="drmemory",
                            mode="copy",
                            name="Checkout Dr. Memory"))
drm_win_factory.addStep(
    ShellCommand(
        command=["copy", "/Y",
                 WithProperties("..\\..\\dr_builds\\dr_%(dr_revision:-latest)s.7z"),
                 "dr.7z"],
        haltOnFailure=True,
        name="Get DR build",
        description="fetch DR"))
drm_win_factory.addStep(
    ShellCommand(
        command=["7z", "x", "-y", "dr.7z"],
        haltOnFailure=True,
        name="Unpack DR build",
        description="unpack DR"))
                                              
# TODO(timurrrr): this ugly hack is required to get the abs path of the drmemory
# build dir.
drm_win_factory.addStep(
    SetProperty(
        command="cd",
        property="build_abspath",
        name="Get the Dr. Memory build directory absolute path",
        description="get abs path"))

drm_win_factory.addStep(
    Configure(
        command=["cmake", "-G", "NMake Makefiles",
                 "-DUSE_DRSYMS=ON", "-DBUILD_DOCS:BOOL=OFF",
                 WithProperties("-DDynamoRIO_DIR:FILEPATH=%(build_abspath)s\\exports\\cmake"),
                 "-DCMAKE_INSTALL_PREFIX:FILEPATH=exports32",
                 "-DNTDLL_LIBPATH:FILEPATH=%s" % WINDDK_PATH,
                 "..\\drmemory"],
        name="CMake"))
drm_win_factory.addStep(
    Compile(
        command=["nmake", "install"],
        name="Build Dr. Memory"))
drm_win_factory.addStep(
    Test(
        command=["nmake", "test"],
        name="Run Dr. Memory tests"))

dr_lin_factory  = factory.BuildFactory()
# TODO: steps
drm_lin_factory = factory.BuildFactory()
# TODO: steps

from buildbot.config import BuilderConfig

FACTORIES = {
  "win":   [["dr", dr_win_factory], ["drm", drm_win_factory]],
  "linux": [["dr", dr_lin_factory], ["drm", drm_lin_factory]],
}

c['builders'] = []
for (os, os_versions) in MACHINES:
  for version in os_versions:
    for (f_name, f_obj) in FACTORIES[os]:
      c['builders'].append(
          BuilderConfig(name=("%s-%s-%s" % (os, version, f_name)),
                        slavename=("%s_%s_bot" % (os, version)),
                        factory=f_obj,
                        builddir=("%s_%s_%s_checkout" % (os, version, f_name))))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# Use allowForce=True (boolean, not a string. ie: not 'True') to allow
# Forcing Builds in the Web User Interface. The default is False.
# from buildbot.status import html
# c['status'].append(html.WebStatus(http_port=8010,allowForce=True))

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=9010,allowForce=False))
c['status'].append(html.WebStatus(http_port=9011,allowForce=True))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Dr. Memory"
c['projectURL'] = "http://code.google.com/p/drmemory/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:9010/"
